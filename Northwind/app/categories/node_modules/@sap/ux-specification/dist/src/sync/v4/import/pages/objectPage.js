"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v4_1 = require("../../../../specification/v4/");
const common_1 = require("../../../../specification/common");
const index_1 = require("../common/index");
const common_2 = require("../../../common");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../../extensionLogger");
const i18n_1 = require("../../../../i18n/i18n");
const factory_1 = require("../../export/factory");
/**
 * Fills the sections and subsections of the configuration (recursive function)
 * @param sectionProperties - current properties' list (of sections or subsections)
 * @param manifestSettings - object page settings section of the manifest
 * @param configPart - the given part of the object page config
 * @param manifest - manifest.json of the app
 * @param jsonSchema - app specific schema
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param v4Page - current (object) page
 */
function fillSections(sectionProperties, manifestSettings, configPart, manifest, jsonSchema, factory, v4Page) {
    for (const sectionId in sectionProperties) {
        const schemaSection = sectionProperties[sectionId];
        if (schemaSection['$ref'] &&
            schemaSection['$ref'].startsWith(common_2.DEFINITION_LINK_PREFIX + 'ObjectPageSectionTableV4')) {
            // Section without subsections
            const manifestSectionId = sectionId.replace(/::/g, '/');
            const manifestSection = manifestSettings.controlConfiguration[manifestSectionId];
            if (manifestSection && manifestSection['tableSettings']) {
                // Data needs to be transferred
                configPart[sectionId] = {};
                configPart[sectionId].table = factory.createInstance(common_1.PageTypeV4.ObjectPage, 'ObjectPageTable');
                const sectionDefinition = 'ObjectPageTable<' + sectionId + '>';
                index_1.transferSettingsOfObject(configPart[sectionId].table, manifest, jsonSchema['definitions'][sectionDefinition], v4Page.id, [], manifestSectionId);
                configPart[sectionId].table.toolBar = factory.createInstance(common_1.PageTypeV4.ObjectPage, 'ToolBar', {
                    actions: {}
                });
                // Nothing to transfer yet
                /*transferSettingsOfObject(
                    configPart[sectionId].table.toolBar,
                    manifest,
                    jsonSchema['definitions'][`ToolBar<${sectionId}>`],
                    v4Page.id,
                    []
                );*/
                if (jsonSchema['definitions'][`Actions<${sectionId}>`]) {
                    for (const actionKey in jsonSchema['definitions'][`Actions<${sectionId}>`].properties) {
                        configPart[sectionId].table.toolBar.actions[actionKey] = factory.createInstance(common_1.PageTypeV4.ObjectPage, 'ObjectPageToolBarAction');
                        const action = actionKey.split('DataFieldForAction::')[1];
                        index_1.transferSettingsOfObject(configPart[sectionId].table.toolBar.actions[actionKey], manifest, jsonSchema['definitions'][`ObjectPageToolBarAction<${action}>`], v4Page.id, [actionKey], manifestSectionId);
                        if (Object.keys(configPart[sectionId].table.toolBar.actions[actionKey]).length === 0) {
                            delete configPart[sectionId].table.toolBar.actions[actionKey];
                        }
                    }
                }
                if (manifestSection['columns']) {
                    configPart[sectionId].table.columns = {};
                    for (const columnKey in manifestSection['columns']) {
                        const column = manifestSection['columns'][columnKey];
                        if (!column.template) {
                            configPart[sectionId].table.columns[columnKey] = factory.createInstance(common_1.PageTypeV4.ObjectPage, 'ObjectPageTableColumn');
                            index_1.transferSettingsOfObject(configPart[sectionId].table.columns[columnKey], manifest, jsonSchema['definitions']['ObjectPageTableColumn'], v4Page.id, [columnKey], manifestSectionId);
                        }
                    } //else: custom column ==> open ToDo
                }
            }
        }
        else if (schemaSection['properties'] && schemaSection['properties']['subsections']) {
            configPart[sectionId] = {
                subsections: {}
            };
            fillSections(schemaSection['properties']['subsections']['properties'], manifestSettings, configPart[sectionId]['subsections'], manifest, jsonSchema, factory, v4Page);
        }
    }
}
/**
 * Fills the object page config from the given manifest
 * @param objectPageConfig - the object page config
 * @param manifest - manifest.json of the app
 * @param v4Page - current (object) page
 * @param jsonSchema - app specific schema
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 */
function fillConfig(objectPageConfig, manifest, v4Page, jsonSchema, factory) {
    // Transfer header information
    objectPageConfig.header = factory.createInstance(common_1.PageTypeV4.ObjectPage, 'ObjectPageHeader');
    index_1.transferSettingsOfObject(objectPageConfig.header, manifest, jsonSchema['definitions']['ObjectPageHeader'], v4Page.id, []);
    // Transfer layout information
    objectPageConfig.layout = factory.createInstance(common_1.PageTypeV4.ObjectPage, 'ObjectPageLayout');
    index_1.transferSettingsOfObject(objectPageConfig.layout, manifest, jsonSchema['definitions']['ObjectPageLayout'], v4Page.id, []);
    index_1.transferSettingsOfObject(objectPageConfig, manifest, jsonSchema, v4Page.id, []);
    if (!objectPageConfig.sections) {
        objectPageConfig.sections = {};
    }
    const manifestSettings = v4Page.options && v4Page.options.settings;
    if (manifestSettings) {
        if (manifestSettings.controlConfiguration && jsonSchema['definitions']['Sections']) {
            // Fill sections and subsections
            objectPageConfig.sections = {};
            fillSections(jsonSchema['definitions']['Sections'].properties, manifestSettings, objectPageConfig.sections, manifest, jsonSchema, factory, v4Page);
        }
        // Fill Custom sections
        const customSections = manifestSettings.content && manifestSettings.content.body && manifestSettings.content.body.sections;
        if (customSections) {
            objectPageConfig.sections.custom = [];
            for (const sectionId in customSections) {
                const section = factory.createInstance(common_1.PageTypeV4.ObjectPage, 'ObjectPageCustomSectionFragment');
                index_1.transferSettingsOfObject(section, manifest, jsonSchema['definitions']['ObjectPageCustomSectionFragment'], v4Page.id, [], sectionId);
                objectPageConfig.sections.custom.push(section);
            }
        }
    }
}
/**
 * External API: Create configuration (file content) for a V4 object page
 * @param {object} manifest - manifest of the app
 * @param {object} jsonSchema - app specific JSON schema
 * @param {string} routingId - current routing ID of the manifest, identifying the given page
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns {ObjectPageConfig} config - the object page configuration
 */
function createObjectPageConfig(manifest, jsonSchema, routingId, logger) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!manifest[v4_1.ManifestSection.ui5] || !manifest[v4_1.ManifestSection.ui5]['routing']) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTING'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [v4_1.ManifestSection.ui5]
            }
        });
        return;
    }
    const v4Pages = manifest[v4_1.ManifestSection.ui5]['routing']['targets'];
    if (!v4Pages) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOTARGETS'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [v4_1.ManifestSection.ui5, 'routing']
            }
        });
        return;
    }
    const v4Page = v4Pages[routingId];
    if (!v4Page) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTINGID', { routingId: routingId }),
            location: {
                path: common_2.MANIFESTPATH,
                range: [v4_1.ManifestSection.ui5, 'routing']
            }
        });
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV4();
    //Instantiate Page
    const config = factory.createPageInstance(common_1.PageTypeV4.ObjectPage);
    //Fill config.json
    fillConfig(config, manifest, v4Page, jsonSchema, factory);
    return config;
}
exports.createObjectPageConfig = createObjectPageConfig;
//# sourceMappingURL=objectPage.js.map